-module(pfifo). 

-export([new/0, size/1, push/2, pop/1, empty/1]).

%% To use EUnit we must include this:
-include_lib("eunit/include/eunit.hrl").

%% A common pattern is Erlang is to provide services as separate
%% processes. In this module we spawn a new process to keep the state
%% of a FIFO queue. 


%% @doc Creates a new fifo buffer.
-opaque pfifo()::pid().
-spec new() -> pfifo().

new() ->
    spawn(fun() -> loop(fifo:new()) end).

%% This is the process loop.

loop(Fifo) ->
    receive 
        {size, PID} ->
            PID ! {size, fifo:size(Fifo)},
            loop(Fifo); 
        {empty, PID} ->
            PID ! fifo:empty(Fifo),
            loop(Fifo);
        {pop, PID} ->
            case fifo:empty(Fifo) of
                true ->
                    PID ! {error, empty_fifo},
                    Tmp = Fifo,
                loop(Tmp);
                false ->
                    Tmp = fifo:pop(Fifo),
                    %%[Tmp || {_, Tmp} <- Fifo],
                    PID ! Tmp,
                        loop(element(2, Tmp))
            end;
        {push, Value, PID} ->
            Tmp = fifo:push(Fifo, Value),
            PID ! Tmp,
            loop(Tmp)
end.

pop(Fifo) ->
    Fifo ! {pop, self()},
    receive
        {Value, {fifo, In, Out}} ->
            %%{Value, {fifo, In, Out}};
            Value;
        {error, empty_fifo} ->
            {error, empty_fifo}
    end.

push(Fifo, Value) ->
    Fifo ! {push, Value, self()},
    receive
        {fifo, In, Out} ->
            {fifo, In, Out}
                
    end.
		 
    
    
    
    
    
    
    
